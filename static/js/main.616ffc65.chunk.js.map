{"version":3,"sources":["components/pages/dashboard/Dashboard.js","components/pages/add/Add.js","components/shared/top_navbar/TopNavbar.js","components/App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeSubscriber","subscriber","subscribers","state","updatedSubs","forEach","sub","name","push","setState","undefined","location","_this2","react_default","a","createElement","className","Link","to","pathname","type","map","phone","onClick","Component","updatedSubscribers","Add","onNameChange","e","target","value","onPhoneChange","handleFormSubmit","toDashboard","console","log","Redirect","onChange","concat","TopNavbar","React","withRouter","TopNavbar_TopNavbar","App","BrowserRouter","basename","process","shared_top_navbar_TopNavbar","Switch","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAOqBA,qBAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBVQ,iBAAmB,SAACC,GAAe,IACvBC,EAAgBT,EAAKU,MAArBD,YACFE,EAAc,GAGpBF,EAAYG,QAAQ,SAAAC,GACbA,EAAIC,OAASN,EAAWM,MACvBH,EAAYI,KAAKF,KAKzBb,EAAKgB,SAAS,CACVP,YAAaE,KA9BjBX,EAAKU,MAAQ,CACTD,YAAa,IAHFT,mFAUf,QAAiCiB,IAA9Bd,KAAKJ,MAAMmB,SAASR,MACnBP,KAAKa,SAAS,CAAEP,YAAY,SAC1B,KACMA,EAAgBN,KAAKJ,MAAMmB,SAASR,MAApCD,YACRN,KAAKa,SAAS,CAAEP,kDAsBf,IAAAU,EAAAhB,KAGGM,EAAgBN,KAAKO,MAArBD,YAkBR,OACAW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAfc,kBACdF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,GAAI,CAAEC,SAAU,OAAQhB,MAAOS,EAAKT,QAEpCU,EAAAC,EAAAC,cAAA,UACIC,UAAU,aACVI,KAAK,UAFT,SAWJ,MAGAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,QAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,SAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAMjBd,EAAYmB,IAAI,SAAApB,GACd,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACTf,EAAWM,MAEjBM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACTf,EAAWqB,OAEjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UACIC,UAAU,gBACVO,QAAU,WACNX,EAAKZ,iBAAiBC,KAH9B,sBAvFWuB,sBCCnCC,SAAqB,IAEJC,cAEjB,SAAAA,EAAYlC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACfjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KASVmC,aAAe,SAACC,GACZnC,EAAKgB,SAAS,CACVF,KAAMqB,EAAEC,OAAOC,SAZJrC,EAiBnBsC,cAAgB,SAACH,GACbnC,EAAKgB,SAAS,CACVa,MAAOM,EAAEC,OAAOC,SAnBLrC,EAwBnBuC,iBAAmB,WAGf,QAAiCtB,IAA9BjB,EAAKD,MAAMmB,SAASR,MACnBsB,EAAqB,OACnB,KACMvB,EAAgBT,EAAKD,MAAMmB,SAASR,MAApCD,YACRuB,EAAqBvB,EAIzBuB,EAAmBjB,KAAK,CACpBD,KAAMd,EAAKU,MAAMI,KACjBe,MAAO7B,EAAKU,MAAMmB,QAGtB7B,EAAKgB,SAAS,CAACwB,aAAa,KAtC5BxC,EAAKU,MAAQ,CACTI,KAAM,GACNe,MAAM,GACNW,aAAa,GALFxC,wEA2CV,IAAAmB,EAAAhB,KAGL,IAA+B,IAA3BA,KAAKO,MAAM8B,YAEX,OADAC,QAAQC,IAAIV,GACLZ,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUlB,GAAI,CAAEC,SAAU,IAAKhB,MAAO,CAAED,YAAauB,MAgBhE,OACAZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,GAAG,IACHF,UAAU,aAFd,QAMAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAGZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,SACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcI,KAAK,OAAOb,KAAK,OAAO8B,SAAWzC,KAAK+B,eAEvEd,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,UACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAcI,KAAK,SAASb,KAAK,QAAQ8B,SAAWzC,KAAKmC,gBAE1ElB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,4BACAH,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,SAAAsB,OAAuC1C,KAAKO,MAAMI,OAClDM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,UAAAsB,OAAwC1C,KAAKO,MAAMmB,QACnDT,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAvCa,WACjB,OACQF,EAAAC,EAAAC,cAAA,UACIC,UAAU,aACVI,KAAK,SACLG,QAASX,EAAKoB,kBAHlB,QAqCJ,eA7FiBR,qBCH3Be,0LACM,IACIpB,EAAavB,KAAKJ,MAAMmB,SAAxBQ,SACR,OACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAY,QAEE,MAAbG,EAAmB,sBAAwB,2BARxCqB,IAAMhB,YAgBfiB,cAAW,SAAAjD,GAAK,OAAIqB,EAAAC,EAAAC,cAAC2B,EAAclD,KCEnCmD,mLAdX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAeC,SAAUC,kBACvBjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7D,IACjCsB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOC,KAAK,OAAOE,UAAW1B,cARxBF,aCGE6B,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.616ffc65.chunk.js","sourcesContent":["// Import React modules\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n// Import Component Style\nimport './Dashboard.css';\n\nexport default class Dashboard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscribers: []\n        };\n    }\n\n    componentDidMount() {\n        \n        // Check if component was loaded from /add route or directly\n        if(this.props.location.state === undefined){\n            this.setState({ subscribers:[] });\n        } else{\n            const { subscribers } = this.props.location.state; \n            this.setState({ subscribers });\n        }\n    }\n\n    // Handle Delete button press\n    removeSubscriber = (subscriber) => {\n        const { subscribers } = this.state;\n        const updatedSubs = [];\n\n        // Populate array with all subscribers except the one to be deleted\n        subscribers.forEach(sub => {\n            if(sub.name !== subscriber.name) {\n                updatedSubs.push(sub);\n            }\n        });\n\n        // setState with updated array\n        this.setState({\n            subscribers: updatedSubs\n        });\n    }\n\n    render() {\n\n        // ES6 destructuring\n        const { subscribers } = this.state;\n\n        // console.log('Current Subscribers Count : '+ this.state.subscribers.length);\n\n        // Create a Button Component which routes to Add page\n        const AddButton = () => (\n            <Link\n                to={{ pathname: '/add', state: this.state }}\n                >\n                <button\n                    className='button-add'\n                    type=\"button\" \n                >\n                    ADD\n                </button>\n            </Link>\n        );\n\n        return (\n        <div className='dashboard'>\n            <AddButton/>\n\n            { /* Create Column Labels above values */ }\n            <div className=\"container\">\n                <div className=\"name\">\n                    NAME\n                </div>\n                <div className=\"phone\">\n                    PHONE\n                </div>\n                <div className=\"delete-buttons\">\n                </div>\n            </div>\n\n            { /* Populate values in columns */ }\n            \n            { subscribers.map(subscriber => {\n                return (\n                    <div className=\"container-values\">\n                        <div className=\"name-value\">\n                            { subscriber.name }\n                        </div>\n                        <div className=\"phone-value\">\n                            { subscriber.phone }\n                        </div>\n                        <div className=\"delete-buttons\">\n                            <button \n                                className='button-delete'\n                                onClick={ ()=> {\n                                    this.removeSubscriber(subscriber);\n                                } }\n                                >\n                                Delete\n                            </button>\n                        </div>\n                    </div>\n                );\n            }) }\n        </div>\n        );\n    }\n}\n","// Import react modules\nimport React, { Component } from 'react';\nimport { Link,Redirect } from 'react-router-dom';\n\n// Import component stylesheet\nimport './Add.css';\n\n// Temporary Subscribers list to receive and update subscribers\nlet updatedSubscribers = [];\n\nexport default class Add extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            phone:'',\n            toDashboard: false\n        };\n    }\n\n    // Handle change in Name field\n    onNameChange = (e) => {\n        this.setState({\n            name: e.target.value\n        });\n    }\n\n    // Handle change in Phone field\n    onPhoneChange = (e) => {\n        this.setState({\n            phone: e.target.value\n        });\n    }\n\n    // Handle Add Button press\n    handleFormSubmit = () => {\n\n        // Check if component was loaded from /add route or directly\n        if(this.props.location.state === undefined){\n            updatedSubscribers = [];\n        } else{\n            const { subscribers } = this.props.location.state; \n            updatedSubscribers = subscribers;\n        }\n\n        // Update the received list with new subscriber\n        updatedSubscribers.push({\n            name: this.state.name,\n            phone: this.state.phone\n        });\n\n        this.setState({toDashboard: true});\n    }\n\n    render() {\n\n        // Redirect to dashboard when addition completed\n        if (this.state.toDashboard === true) {\n            console.log(updatedSubscribers);\n            return <Redirect to={{ pathname: '/', state: { subscribers: updatedSubscribers } }} />\n        }\n\n        // Create component for Submit Button\n        const SubmitButton = () => {\n            return (\n                    <button\n                        className='button-add'\n                        type=\"button\" \n                        onClick={this.handleFormSubmit}\n                    >\n                        ADD\n                    </button>\n            );\n        }\n\n        return (\n        <div className='add-page'>\n            <Link \n                to='/'\n                className='back-link'>\n                BACK\n            </Link>\n\n            <form className='add-form'>\n\n                { /* Name input field */ }\n                <p className='field-label'>Name:</p>\n                <input className='input-field' type=\"text\" name=\"name\" onChange= {this.onNameChange} />\n\n                <br/>\n                { /* Phone input field */ }\n                <p className='field-label'>Phone:</p>\n                <input className='input-field' type=\"number\" name=\"phone\" onChange= {this.onPhoneChange}/>\n                \n                <p className='display-label-top'> Subscriber to be added:</p>\n                <br/>\n\n                { /* Display live state values for Name and Phone number */ }\n                <p className='display-label'>{`Name: ${this.state.name}`}</p>\n                <p className='display-label'>{`Phone: ${this.state.phone}`}</p>\n                <br/>\n                \n                <SubmitButton/>\n            </form> \n        </div>\n        );\n    }\n}\n","// Import react modules\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Import component stylesheet\nimport './TopNavbar.css';\n\nclass TopNavbar extends React.Component{\n    render(){\n        const { pathname } = this.props.location; \n        return (\n        <div className='navbar'>\n            <ul>\n                <li className = 'link'>\n                    { /* Check for route before populating navbar */}\n                    {pathname === '/' ? 'Phonebook Directory' : 'Add Subscriber'}\n                </li>\n            </ul>\n        </div>\n        );\n    }   \n}\n\nexport default withRouter(props => <TopNavbar {...props}/>);\n","// Import React modules\nimport React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n// Import the Components for different routes(pages)\nimport Dashboard from './pages/dashboard/Dashboard';\nimport Add from './pages/add/Add';\nimport TopNavbar from \"./shared/top_navbar/TopNavbar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <TopNavbar/>\n          <Switch>\n            <Route path='/' exact component={Dashboard} />\n            <Route path='/add' component={Add} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}